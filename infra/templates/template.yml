Description: EC2 & ASG setup for counterstrike gaming server

Parameters:
  # inject in the latest AMI
  Linux2Ami:
    Type: AWS::EC2::Image::Id
  UserDataScript:
    Type: String
  InstanceType:
    Type: String
    Default: t2.micro
  KeyName:
    Type: String
    Default: 'rhys-key-public'
  StudentName:
    Type: String
  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
  PubSubnetCidr:
    Type: String
  PriSubnetCidr:
    Type: String


Resources:
  MainVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      InstanceTenancy: 'default'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-vpc-1"
          
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PubSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-vpc-1-pub-sub"
          
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MainVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PriSubnetCidr
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-vpc-1-pri-sub"
          
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref MainVPC
      GroupDescription: 'Allows incoming traffic on ports 22 (SSH), 80 (HTTP) from CIDR block 0.0.0.0/0'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: !Ref Linux2Ami
      KeyName: !Ref KeyName
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${StudentName}-ec2-instance-1"
      UserData:
        Fn::Base64: !Ref UserDataScript

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-internet-gateway"
  
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-pub-route-table"
          
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-pri-route-table"
          
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - PublicRouteTable
      - InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
      
  MyPublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    DependsOn:
      - PublicRoute
      - PublicRouteTable
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
      
     
  NatEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
        Domain: 'vpc'

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
        AllocationId: !GetAtt NatEIP.AllocationId
        SubnetId: !Ref PublicSubnet

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'MyLoadBalancer'
      Subnets:
        - !Ref PublicSubnet
      Type: network

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 22
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'MyTargetGroup'
      Port: 22
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref MainVPC
      Tags:
        - Key: 'Name'
          Value: !Sub "${StudentName}-LoadBalancerP22Target"
      Targets:
        - Id: !Ref EC2Instance

Outputs:
  StackName:
    Value: !Ref AWS::StackName
